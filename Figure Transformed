import matplotlib.pyplot as plt
import scipy.stats
import numpy as np

# first the plot and function and its tangent are created
fig, axs = plt.subplots() 
k = np.linspace(0.6, 1.6)
def f1(x):
    return (68.00000000000006-207.7500000000002*(x+0.5)**1+245.1666666666669*(x+0.5)**2-139.7333333333335*(x+0.5)**3+38.93333333333338*(x+0.5)**4-4.266666666666672*(x+0.5)**5) #used function
a = 1.1
h = 0.000000000001
c = np.linspace(0.65, 1.5)
f1prime = (f1(a+h)-f1(a))/h # derivative
tan = f1(a)+f1prime*(c-a)  # tangent
plt.plot(k , f1(k), label ='f(x)',color= 'black') #plot function
#plt.plot(c ,tan, color = 'grey' ) #plot tangent

def tan(q):
    return f1(a)+f1prime *(q-a)


#the red norm. distr. is created
def ydistr(j_min,j_max,mean,std):
#j_min = 0.5
#j_max = 2.0
#mean = 1.25 
#std = 0.3
    j = np.linspace(j_min, j_max, 100)
    i = (scipy.stats.norm.pdf(j,mean,std))*0.4

    plt.plot(j,i, color='red')# plot red norm. distr.
    shade1 = np.linspace(mean - std, mean + std, 300)
    plt.fill_between(shade1, (scipy.stats.norm.pdf(shade1,mean,std))*0.4 , color='hotpink',)# fill area below red norm.distr.
    #plt.plot([mean,mean],[0, f1(mean)],color = 'grey')#plot normal lines
    #plt.plot([mean -std,mean -std],[0, tan(mean-std)],':', color = 'grey') #dotted lines
    #plt.plot([mean + std,mean + std],[0, tan(mean+std)],':', color = 'grey')
    return
#green norm. distr. is created
#def xdistr(f_min,f_max,mean,std2,std ):
#f_min = 0.5
#f_max = 2.0
#mean2 = 1.25
#std2 = 0.3
    #l = np.linspace(f_min, f_max, 300)
    #m = scipy.stats.norm.pdf(l,f1(mean),std2)*1/3
    #plt.plot(m,l, color='green') #plot green norm. distr.
    #shade2 = np.linspace(tan(mean-std), tan(mean+std), 300) #fill area below green norm. distr.
    #plt.fill_betweenx(shade2 ,(scipy.stats.norm.pdf(shade2,f1(mean),std2))*1/3, color='lightgreen')
    #plt.plot([0, mean],[f1(mean), f1(mean)], color ='grey') #normal lines
    #plt.plot([0,mean+std],[tan(mean+std), tan(mean+std)],':', color = 'grey')#plot dotted lines
    #plt.plot([0,mean-std],[tan(mean-std), tan(mean-std)],':', color = 'grey')
    #return
def xdistr(f_min,f_max,mean,std2,std ):
#f_min = 0.5
#f_max = 2.0
#mean2 = 1.25
#std2 = 0.3
    l = np.linspace(f_min, f_max, 10000000)
    k = (scipy.stats.norm.pdf(l,f1(mean),std2))
    m = (68.00000000000006-207.7500000000002*(k+0.5)**1+245.1666666666669*(k+0.5)**2-139.7333333333335*(k+0.5)**3+38.93333333333338*(k+0.5)**4-4.266666666666672*(k+0.5)**5*1/20)*1/80
    plt.plot(m,l, color='green') #plot green norm. distr.
    shade2 = np.linspace(tan(mean-std), tan(mean+std), 10000000) #fill area below green norm. distr.
    q = (scipy.stats.norm.pdf(shade2,f1(mean),std2))
    plt.fill_betweenx(shade2 ,(68.00000000000006-207.7500000000002*(q+0.5)**1+245.1666666666669*(q+0.5)**2-139.7333333333335*(q+0.5)**3+38.93333333333338*(q+0.5)**4-4.266666666666672*(q+0.5)**5 *1/20)*1/80, color='lightgreen')
    #plt.plot([0, mean],[f1(mean), f1(mean)], color ='grey') #normal lines
    #plt.plot([0,mean+std],[tan(mean+std), tan(mean+std)],':', color = 'grey')#plot dotted lines
    #plt.plot([0,mean-std],[tan(mean-std), tan(mean-std)],':', color = 'grey')
    return







plt.gca().axes.get_yaxis().set_visible(False) #hide axis values
plt.gca().axes.get_xaxis().set_visible(False)

ydistr(0.5,1.7,1.1,0.25)
xdistr(0.8,1.8,1.1,0.35,0.14)
plt.savefig('FigureonUncertainty.pdf')
plt.savefig('FigureonUncertainty')
